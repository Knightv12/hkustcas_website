"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Helper = Helper;
exports.createHelper = createHelper;
exports.noop = noop;
exports.shallowCopy = shallowCopy;
exports.throwOnMissing = throwOnMissing;
exports.warnOnMissing = warnOnMissing;

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var slice = Array.prototype.slice;

function Helper(fn, args) {
  this.fn = fn;
  this.args = slice.call(args);
}

function createHelper(handler) {
  return function () {
    if (arguments.length < 2) {
      return new Helper(handler, arguments);
    } else {
      var args = slice.call(arguments, 1);
      args.unshift(shallowCopy(arguments[0]));
      return handler.apply(null, args);
    }
  };
}

function shallowCopy(obj) {
  return Array.isArray(obj) ? _toConsumableArray(obj) : _objectSpread({}, obj);
} // Default helpers for handling lookup key missing object scenario.
// To be used as values assigned to `update.onLookupMissingObject` property.


function noop() {}

function warnOnMissing(obj, key) {
  if ((typeof console === "undefined" ? "undefined" : _typeof(console)) !== undefined) {
    // eslint-disable-next-line no-console, no-undef
    (console.warn || console.log)("update-js: No object found by ".concat(key, ", update ignored. Collection:"), obj);
  }
}

function throwOnMissing(obj, key) {
  throw new Error("update-js: No object found by ".concat(key, ", autocreate is not supported."));
}