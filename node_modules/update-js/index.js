"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = update;

var _lodash = _interopRequireDefault(require("lodash.set"));

var _getLookup = require("get-lookup");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }

function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

update["in"] = updateIn;
updateIn["with"] = updateInWith;
update.onLookupMissingObject = _utils.noop;

function update(obj, path, value) {
  return update["with"](obj, path, function () {
    return value;
  });
}

function updateInWith(obj, path, fn) {
  if (_typeof(path) === 'object') {
    Object.keys(path).forEach(function (updatePath) {
      var value = path[updatePath];

      if (value instanceof _utils.Helper) {
        value.fn.apply(null, [obj, updatePath].concat(_toConsumableArray(value.args)));
      } else {
        updateInWith(obj, updatePath, function () {
          return path[updatePath];
        });
      }
    });
  } else {
    _update(obj, path, fn);
  }

  return obj;
}

function updateIn(obj, path, value) {
  return updateInWith(obj, path, function () {
    return value;
  });
}

update["with"] = (0, _utils.createHelper)(function (obj, path, fn) {
  return updateInWith(obj, path, fn);
});
update.unshift = (0, _utils.createHelper)(function (obj, path, item) {
  return updateInWith(obj, path, function (collection) {
    return [item].concat(_toConsumableArray(collection));
  });
});
update.prepend = update.unshift;
update.shift = (0, _utils.createHelper)(function (obj, path) {
  return updateInWith(obj, path, function (collection) {
    return collection.slice(1);
  });
});
update.push = (0, _utils.createHelper)(function (obj, path, item) {
  return updateInWith(obj, path, function (collection) {
    return [].concat(_toConsumableArray(collection), [item]);
  });
});
update.add = update.push;
update.pop = (0, _utils.createHelper)(function (obj, path) {
  return updateInWith(obj, path, function (collection) {
    return collection.slice(0, -1);
  });
});
update.remove = (0, _utils.createHelper)(function (obj, path) {
  var match = path.match(/^(.+)\.(?!\.)(.+)$/);

  if (match) {
    var _match2 = _slicedToArray(match, 3),
        _match = _match2[0],
        collectionPath = _match2[1],
        key = _match2[2];

    return updateInWith(obj, collectionPath, function (collection) {
      var index = (0, _getLookup.isLookupKey)(key) ? (0, _getLookup.lookupIndex)(collection, key) : parseInt(key);

      if (index > -1) {
        return collection.slice(0, index).concat(collection.slice(index + 1));
      }

      return collection;
    });
  }

  return obj;
});
update.assign = (0, _utils.createHelper)(function (obj, path, object) {
  return updateInWith(obj, path, function (old) {
    return _objectSpread(_objectSpread({}, old), object);
  });
});
update.del = (0, _utils.createHelper)(function (obj, path) {
  var _path$match = path.match(/^(.+)\.(?!\.)?(.+)$/),
      _path$match2 = _slicedToArray(_path$match, 3),
      _match = _path$match2[0],
      objPath = _path$match2[1],
      key = _path$match2[2];

  return updateInWith(obj, objPath, function (value) {
    var _toRemove = value[key],
        rest = _objectWithoutProperties(value, [key].map(_toPropertyKey));

    return rest;
  });
});

function _update(current, path, fn) {
  var _path$match3 = path.match(/^([^.]+)\.?(.+)?$/),
      _path$match4 = _slicedToArray(_path$match3, 3),
      _match = _path$match4[0],
      key = _path$match4[1],
      rest = _path$match4[2];

  var isLookup = (0, _getLookup.isLookupKey)(key);
  var keyIndex = key;

  if (isLookup) {
    if (!Array.isArray(current)) {
      throw new Error('object lookup available only for existing collections');
    }

    keyIndex = (0, _getLookup.lookupIndex)(current, key);

    if (keyIndex === -1) {
      update.onLookupMissingObject(current, key);
      return current;
    }
  }

  if (current[keyIndex] === undefined) {
    if ((0, _getLookup.isLookupKey)(rest)) {
      throw new Error('autocreate with lookup path is not supported');
    }

    return (0, _lodash["default"])(current, path.split('.'), fn());
  }

  if (!rest) {
    return current[keyIndex] = fn(current[keyIndex]);
  }

  current[keyIndex] = (0, _utils.shallowCopy)(current[keyIndex]);

  _update(current[keyIndex], rest, fn);
}